import re #regex
from typing import Union


class Complex:
    def __init__(self, real:Union[float, int], imaginary:int):
        self.real = real
        self.imaginary = imaginary

    def __add__(self, other):
        return Complex(self.real + other.real, self.imaginary + other.imaginary)

    def __sub__(self, other):
        return Complex(self.real - other.real, self.imaginary - other.imaginary)

    @classmethod
    def from_str(cls, val:str):
        return Complex()

def class_add_outcome(complex1, complex2):
    return complex1 + complex2

def print_class_add_outcome(outcome):
    print (str(outcome.real), str(outcome.imaginary))


#(2+6j)+(4-1j)
def enter_user_sign():
    entered = input("Enter sign as (real1 + imag1) +- (real2 + imag2)\n")
    splitted = re.split("[(*)]", entered)

    split_first = re.split("[+-]", splitted[1])
    split_sign = splitted[2]
    split_second = re.split("[+-]", splitted[3])
    complex_first = Complex(int(split_first[0]), split_first[1])
    complex_first = Complex(int(split_first[0]), split_first[1])
    complex_second = Complex(int(split_second[0]), split_second[1])
    print(str(complex_first.real), str(complex_first.imaginary))
    print(str(complex_second.real), str(complex_second.imaginary))
    if split_sign == '+':
        outcome = complex_first + complex_second
    if split_sign == '-':
        outcome = 2
    return outcome

def main():
    com = Complex(1,2j)
    com1 = Complex(4,-3j)
    outcome_add = class_add_outcome(com1, com)
    print_class_add_outcome(outcome_add)
    af = enter_user_sign()
    print(str(af.real), str(af.imaginary))


if __name__ == '__main__':
    main()
